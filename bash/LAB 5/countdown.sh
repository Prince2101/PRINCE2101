#!/bin/bash

# This script demonstrates how to trap signals and handle them using functions

# Task: Add traps for the INT and QUIT signals. If the script receives an INT signal,
#       reset the count to the maximum and tell the user they are not allowed to interrupt
#       the count. If the script receives a QUIT signal, tell the user they found the secret
#       to getting out of the script and exit immediately.

#### Variables
programName="$0" # used by error_functions.sh
sleepTime=1 # delay used by sleeptime
numberOfSleeps=10 # how many sleeps to wait for before quitting for inactivity

#### Functions

# This function will send an error message to stderr
# Usage:
#   error-message ["some text to print to stderr"]
#

trap max_count SIGINT # here evoking the max_count function if SIGINT is generated, which is generated by using ctrl + c (Numeric value of SIGINT is 2)

trap secret 3	# here evoking the secret function if SIGQUIT (numeric value 3) is generated.


function secret { # creating the function.
  echo "You found the secret to get out of the script" # code to be executed if function is called
  exit
} # closing the function.

function max_count { #creating the function.
  echo "You are not allowed to interrupt the count" #code to be executed if function is called

  sleepCount=$(($NumberOfSleeps+20)) # increasing the value of sleepcount to the max.

} # closing the function.

function error-message {
        local prog=`basename $0`
        echo "${prog}: ${1:-Unknown Error - a moose bit my sister once...}" >&2
}

# This function will send a message to stderr and exit with a failure status
# Usage:
#   error-exit ["some text to print" [exit-status]]
#

function error-exit {
        error-message "$1"
        exit "${2:-1}"
}
function usage {
        cat <<EOF
Usage: ${programName} [-h|--help ] [-w|--waittime waittime] [-n|--waitcount waitcount]
Default waittime is 1, waitcount is 10
EOF
}

# Normally traps catch signals and do something useful or necessary with them


# Produce the numbers for the countdown
function doCountdown {
while [ $sleepCount -gt 0 ]; do # runs loop until value of varaible sleepCount is greater than 0.
    echo $((sleepCount * 100 / $numberOfSleeps)) # code to be executed if condition is true
    sleepCount=$((sleepCount - 1)) # decreasing value of sleepcount by 1
    sleep $sleepTime # sleep command is used as countdown function
done # closing while loop
}

#### Main Program

# Process command line parameters
while [ $# -gt 0 ]; do # runs the loop till the number of arguments is greater than zero.
    case $1 in # if the condition is true, using case statement, checking various values for $1. if various possible values for a single variable is to be checked, the case statement can be used as a substitute of if statement .
        -w | --waittime ) # if --waitime or -w is in the $1, the following sequences of command are executed.
            shift # the shift command shifts the value of an argument simultaneously to the previous one.
            sleepTime="$1"
            ;; # closing the case option.
        -n | --waitcount) # if --waitcount or -n is in $1, the following sequences of commands are executed.
            shift # the shift command shifts the value of an argument simultaneously to the previous one.
            numberOfSleeps="$1"
            ;; # closing the case option.
        -h | --help )
         # if --help or -h is in $1, the following sequences of command are executed.
            usage
            exit # exits the program.

            ;; # closing the case option.


        * ) # anything besides the above mentioned cases are available in $1 #then the following sequences of command are executed.
            usage
            error-exit "$1 not a recognized option" # the command here alerts the user that the provided option is not recognized.

    esac # closing case statement
    shift # simultaneously shifting the value of variables.
  done # closing the while statement.

if [ ! $numberOfSleeps -gt 0 ]; then # it checks if the value of numberOfSleeps is greater than 0
    error-exit "$numberOfSleeps is not a valid count of sleeps to wait for signals" #if value of numberOfSleeps is greater than 0, then the sequence of command to be executed
fi # closing the if statement.

if [ ! $sleepTime -gt 0 ]; then # check if value of sleepTime is greater than 0
    error-exit "$sleepTime is not a valid time to sleep while waiting for signals" #if value of numberOfSleeps is greater than 0, then the sequence of command to be executed
fi # closing the if statement.


sleepCount=$numberOfSleeps

while [ $sleepCount -gt 0 ]; do # until value of sleepcount is greater than 0, it runs the loop
doCountdown|dialog --gauge "Remaining Time" 7 60 # for GUI presentation, calling doCountdown function alongside dialog command
stty sane
sleepCount=$((sleepCount - 10)) # decreasing the value of sleepcount by 10
done # closing the while loop.


echo "Wait counter expired, exiting peacefully" # user is alerted that program is exiting.
